					Gettters and Setters


	Геттеры и сеттеры - методы у создаваемого (ООП) обьекта, которые устанавливают или выдают значения обьекта через определенную логику.

	Например: у нашего ООП обьекта есть приватное свойство, при его логировании нам надо обязательно сделать запрос на сервер и изменить какие-то данные.
	Для этого мы прописывам setter для данного свойства, который выполняет запрос и прочую логику, далее выдает это свойство.

	
	Getter:

	Пример использования getter-а, который выдает возраст у обьекта person.

	let person = {
    		name: "Eddy",
    		dateOfBirth: 2000,
    		get age() {
        		let age = new Date().getFullYear() - this.dateOfBirth;
        		this.age = age;
        		return age;
    		 	},
		}

	// В примере сверху у нас есть приватное свойство age, которое можно получить только с помощью getter-a, т.е. person.age - выполнит код в getter-е и выдаст возраст в данный момент.



	

	Setter:

	Сеттер выполняет код при переопределении свойства обьекта.

	Пример:

	const person = {
    		name: "Eddy",
    		birthYear: 2000,
    		get age() {
        		let age = new Date().getFullYear() - this.birthYear;
        		return age;
    		},
    		set age(value) {
        		this.birthYear = new Date().getFullYear() - value
    		 }
		}

	// В верхнем примере мы можем переопределять возраст, а сеттер автоматом меняет дату рождения для правильного кода.


	Пример:

	const person = {
    		_name: "Eddy",
   		 get name() {
        		return this._name;
    		},
    		set name(value) {
        		this._name = value
    		 }
		}


	// В верхнем примере у нас примитивный код с сеттором и геттером. НО мы используем приватное свойсто с ДРУГИМ именем, которое предотвращает рекурсию

	// если бы свойство называлось "name" - //this.name = value// Вызвало бы рекурсию setter-а. 





	PSSSSSSSSSSSS - При использовании геттеров и сеттеров в обьекта не должно быть свойств с названием геттеров и сеттеров.





















	