

		Способы запроса и получения данных на сервер.


	1-ый метод XHR - XML HTTP Request. Пример пользования: 

		1) Создаем инстанс класса XMLHttpRequest - const XHR = new XMLHttpRequest()  	// Мы создали обьект и теперь можем пользоваться его методами.

		2) Создем запрос с open(), в параметрах первым указываем метод запроса(GET, POST), а вторым URL. - XHR.open('GET', requestUrl);				// Также можем написать другой метод(POST...)

		3) Присваиваем функцию к слушателю .onload, которая будет выполнена при получении запроса - XHR.onload = ()=> console.log(XHR.response) // Это обязательно над прописывать до отправки запроса.

		4) Отправдяем запрос - XHR.send() // Будет вызвана функция onload при получении данных.			// Если у нас метод POST в скобках нужно указать JSON обьект(строчку), который оптравится на сервер.

		PS - Можем это все добавить в промис и разместить resolve в onload() - XHR.onload(resolve(XHR.response))








	2-ой метод Fetch - Позволяет сделать запрос более удобным образом. Который при выполнении уже возвращает промис с response-ом в resolve. 		// По умалчанию использует метод GET.


		Пример (GET): 
		// Декларирование
		function sendRequest(url) {										
					    return fetch(url).then(reponse => response.json())				// Метод fetch возвращает промис,который выдает сразу спарсенный обьект из JSON, 
					  } 										// наша функция также возвращает это все...

		// Вызов
		sendRequest(url).then((data)=> {
						console.log(data)							// Выводит в консоль обьект из response
						}



		Пример (POST):		
		fetch() - принимает 2 параметра: 1-ый - url, 2-ой - обьект с параметрами запроса(method, body, headers)


		// Декларирование

		function sendRequest(method, url, body) {
								let headers = {'Content-Type': 'application/json'}
								return fetch(url,{method: method, body: JSON.stringify(body), headers: headers})
							 }













	3-ий самый эффективный метод с использованием библиотеки axios. - которая дает более эффективный код, с использованием нативного fetch
						
	






























	Методы запроса на сервер:

		1) GET - Предназначен для получения чего-либо с сервера.

		2) POST - Для создания данных на сервере.

		3) DELETE - Для удаления

		4) PUT - Для полного обновления элемента

		5) PATCH - Для частичного обновления элемента