
				Методы массивов.

Данные методы находятся в прототипе массивов - Array.prototype.




1) .forEach()  -  .forEach() - Тоже самое что и цикл FOR OF, но это метод массива.

		ПРИМЕР: var people = ['Edward', 'Warren', 'Bill'];

			people.forEach(function(person, index, array) {		// В инпут функции мы добавили названия свойств для каждого элемента и мы можем получить их в функции.(1й-элемент, 2й-индекс,3й-сам массив)
								
							console.log(person)	

							});



		Пример сокращенной версии с использованием стрелочной функции: var people = ['Edward', 'Omansio', 'John', 'Bill', 'Warren'];

			people.forEach(person => console.log(person))    	// Мы записали в стрелочной функции, убрали круглые скобки, убрали фигурные скобки т.к. записываем в одну строку. 









2) .map() - почти тоже самое что и .forEach, только с помощью .map мы можем создать новый массив с измененными элементами из старого массива.


		Пример: var people = ['Edward', 'John', 'Warren'];

			var newPeople = people.map(person => return person + ".")  // В return мы указываем то что должно попадать в каждую ячейку массива(по очереди). В данном случае мы добавили точку после каждого имени.\


			newPeople 		///  == ['Edward.', 'John.', 'Warren.']    Мы видоизменили старый массив добавив точку после каждого элемента.  


	PS - в стрелочной функции в одну строку return можем не писать.













3) .filter - Создает новый массив с отфильтрованными элементами из старого.

		Пример: var people = [{name: 'Edward', gender: 'male'}, {name: 'Anjela', gender: 'female'},{name: 'Jack', gender: 'male'}, {name: 'Ann', gender: 'female'}, {name: 'Jane', gender: 'female'}];	// Массив с разными полами

			var female = people.filter(person => {			// Создаем новый массив с нужными параметрами. Применяем функции к элементу массива. Проверяем параметры. Выдаем true если элемент подходит

								if(person.gender == 'female') {		// Проверяем условия
													
												return true;  	// Добавляем в массив.

												}								
											});



		Пример сокращенной функции.  var female = people.filter(person => person.gender == 'female');  	// Здесь мы избавились от условного оператора.






3) .find - Находит обьект из массива с заданными параметрами. (почти тоже самое что и .filter() только выдает не массив а сразу элемент (ы) )

		Пример: 	var female = people.find(person => person.name == 'Jane');  	// Сразу выдает первый попавшийся элемент с именем Jane без массива.






4) .findIndex - Находит обьект из массива и выдает его индекс в массиве


		Пример: 	var female = people.findIndex(person => person.name == 'Jane');  	// Выдает индекс Jane в массиве people








5) .sort - Выдает новый сортированный массив из старого. Порядок элементов в новом массиве будет сортирован по возростанию чисел и по алфавиту.

	PS - При сортировке массива с числам этот метод работает иначе. Сравнивает значение чисел по порядку...    Например сортированный массив будет таким: [1, 100000, 21, 30, 4]










6) .reverse() - Возвращает новый массив с обратным порядком элементов.   // Для применения добавляем в переменную





7) .reduce() - Выполняет математические операции в совокупности всех элементов массива и выдает новое значение. Принимает два параметра: 1) функция операций с элементами массива. 2) Начальное значение, которое выйдет в итоге.

		Пример: 	var numbers = [1,2,3];

				numbers.reduce( (accumulator, item)=> item + accumlator ,0);		// В данном случае accumulator - выходное значение, а item каждый элемент массива.
													// В этом коде мы прибавляем каждый элемент массива к выходному значению. Мы, также можем делать любые математические действия.





8) Array.isArray(arrayName)	-	Выдает true, если arrayName является массивом.			// Полезно применить к jQuery        items = Array.from($('.items'));













