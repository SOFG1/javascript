

					Классы и прототипы.

		



		Классы это как бы родители всех обьектов(типов данных). - Object, Array, String, Number, Boolean.  Каждый тип данных имеет свой класс.


		Мы можем создавать также свои классы. 	Пример: class Figure{}      -- Которые также могут иметь свой прототип.







			Прототипы

	Прототип это обьект, который содержит в себе данные(переменные, функции).  Каждый класс(Class, Object, Array, String) содержит свой прототип.
	
	Если мы ищем переменную или функцию в другой переменной. Интерпретатор сначала ищет в самой переменной если находит сразу вызывает, потом в прототипах.

			Пример: let arra = [1,2,3,4];

				arra.sum();  // Интерпретатор поищет функцию в самой переменной, а потом в прототипе, после выдаст ошибку(т.к. не найдет).

			

		
	Мы можем обращаться в прототип класса через variable.__proto__ или Class.prototype и добавляем туда переменные и функции.

			Пример:  person.__proto__.doubleAge = function () { return this.age * 2 }  		 // Теперь функция doubleAge будет доступна всем переменным с классом person-а (Object)


				 Object.prototype.doubleAge = function () { return this.age * 2 }		// Теперь функция doubleAge будет доступна всем переменным с классом Object





	PS - чтобы добавить в прототип класса переменного пишем - variable.__proto__. Чтобы добавить в класс пишем - Class.prototype
	PS - Мы также можем создавать новые классы кроме основных(Object, Array, String, Number, Boolean), которые будут иметь свои прототипы.







			Многоуровневые прототипы.

	Прототипы представляют из себя обьекты. И мы можем один обьект сделать прототипом чего-то. И этот обьект будет иметь 2 уровня прототипов. Первый что мы добавили, а второй прототип класса.


	Пример добавления прототипа:  var obj = Object.create(protoObject)       	// Класс Object имеет метод .create() в прототипе.
										 	// С помощью .create() мы можем создать обьект который будет содержать другой обьект в качестве прототипа.


	Пример: 

		var prot = {func1: function() { console.log('ed') }}    	// Мы создали обьект который станет прототипом другого обьекта.

		var newObj = Object.create(prot)				// Мы создали новый обьект который имеет превый обьект в качестве прототипа.
		
		newObj.name = "New Object"					// newObj был пустым обьектом мы добавили данные...


		PS - Теперь newObj имеет 2 уровня прототипов 		1-ый - Обьект prot.	  2-ой прототип класса Object











			Главный класс Object

	На самом деле все в JS это обьекты. И глобальный класс Object и его прототип относятся ко всем элементам в js.


	Переменные создаются с помощью упрощенного ярлыка:       var string = 'string'   	==	   var string = new String('string')    

								 // На правой стороне показана инициализация с помощью глоб. класса String. т.е. строки тоже являются обьектами в JS.




























	

	
