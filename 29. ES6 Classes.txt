

													Классы ES6


 Классы в JS - как бы общий родитель для группы переменных. 

 Каждый класс имеет конструктор, который создает новый обьект с этим классом.

 Также, каждый класс имеет свой прототип. Прототип - обьект содержащий методы и переменные, доступен своему классу.



				Пример создания класса с конструктором и содержимым прототипа:


	class Animals{	
			// Конструктор									// Мы создали класс с конструктором для создания обьектов с этим классом. И прототип с 2 методами.
			constructor(name, age, hasTail) {
						  this.name = name,
						  this.age = age,
						  this.hasTail = hasTail,
						}
			// Методы и переменные(внизу)							
			showName() {
				     return this.name
					}
			}
			doubleAge() {
				     return this.age * 2
					}
		}

	let lion = new Animal("Alex", 21, true)				// Мы создали обьект(instance) данного класса с определенными параметрами и с доступом к прототипу.

	
	КОНСТРУКТОР - Создает обьекты с этим классом применяя свою конструкцию.

	МЕТОДЫ И ПЕРЕМЕННЫЕ - Добавляются в прототип данного класса и могут быть использованы его инстансами.





..........................................................................................





			Статические методы и переменные.

	Статические методы и перменные записываются с помощью ключевого слова 'static'. Эти переменные будут находится в классе и будут доступны ТОЛЬКО классу(не инстансам).

	Пример: 

		class Animals{
			   static type = "Animals"
			   static logType = ()=> console.log(this.type)
			   constructor(name, age){
									this.name = name,
									this.age = age,
					 			}
			   }

		let cat = new Car("Rocky", 4);

		cat.type 	// returns - undefined

		Animals.type	// returns - "Animals"



............................................................................................



			Наследование

	Удобство классов в том, что можно применить принцип наследования.

	Чтобы создать класс, у которого родительским классом будет другой класс - нужно применить принцип наследования.

	Пример:  class Cats extends Animals {}		// Мы создали класс Cats, у которого есть родительский класс Animals.

	Теперь когда мы будет создавать обьекты класса Cats у нас будет использован родительский конструктор(Animals), т.к. мы не указали конструктор у класса Cats

	Прототипом первого уровня будет свой прототип, а прототипом второго уровня будет прототип Animals.
	Таким образом мы можем делать неограниченное кол-во наследований.

	PS - У инстансов Cats будет доступен прототип Animals, НО у инстансов Animals не будет доступен прототип Cats.




.............................................................................................

		Конструктор вложенных классов.

	У вложенных классов по умолчанию конструктор родительского класса. Но мы можем добавить свойства у существующего контсруктора или изменить параметры присвоения существующий, но удалить не можем.

	Пример:

	class Animal {
			constructor(name, age){
						this.name = name,
						this.age = age,
						}
			}



	class Dog extends Animal{
					constructor{
						    	super(age, name, hasTail)	// Внутри конструктора применяем метод super, который указывает все свойства нового обьекта.
							this.hasTail = hasTail     	// Указываем будущие значения новых свойств, параметр присвоения свойств родительск. конструктора можем поменять если надо удалать не можем
						}
				}




.................................................................................................

		Модификация родительских методов.

	Мы можем перезаписывать и модифицировать методы родительского класса.

	Пример:
			class Animal {
					sayName() { return this.name }
					}


			class Dog {
					sayName() { return "Hello my name is " + this.name           }
					}

	PS - Теперь у нас есть оба метода в прототипах, но дочерний класс выполнит свой, потому что метод будет в прототипе первого уровня. И интерпретатор надет его первым и выполнит.



	Пример использования родительского метода :

			class Animal {
					sayName() { return this.name }
					}


			class Dog {
					sayName() { console.log(this.name); super.sayName          }			// super.sayName - метод sayName родительского класса.
					}



	PS - Мы прописали свои скрипты а далее выполнения метода родительского класса. С использованием 'super'


.................................................................................................


		В прототипе Классов также можно применять getter-ы и setter-ы.


.................................................................................................

Кроме созданных, наших классов в JS уже есть классы, например классы по типам данных(Array, String). Также все переменные и типы данныз в JS относятся к классу Object.





































	